#Цель: закрепить навык решения задач с помощью цикла for, применив знания об основных типах данных.
#Задача "Всё не так уж просто"
#Дан список чисел numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
#Используя этот список, составьте второй список простых чисел, содержащий только простые числа.
#А также третий список not_primes, содержащий все не простые числа.
#Выведите списки простых и составных чисел на экран (в консоль).
#Пункты задачи:
#Создайте пустые списки primes и not_primes.
#При помощи цикла for переберите список numbers.
#Напишите ещё один цикл for (вложенный),
#    в котором будут подбираться делители для числа из первого цикла.
#Чтобы отметить простоту числа, можно использовать
#переменную is_prime, записав в неё значение True перед проверкой.
#В процессе проверки на простоту записывайте числа из
#списка numbers в списки primes и not_primes в зависимости от значения переменной is_prime после проверки (True - в prime, False - в not_prime).
#Выведите списки простых и составных чисел на экран (в консоль).
#Пример результата выполнения программы:
#Исходный код:цифры = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
#Вывод на консоль:
#Простые числа:[2, 3, 5, 7, 11, 13]
#Не Простые числа: [4, 6, 8, 9, 10, 12, 14, 15]
#Примечания:
#Учтите, что число 1 не является ни простым, ни составным числом,
#поэтому оно отсутствует в конечных списках.
#Для проверки на простоту числа вам нужно убедиться,
#что выбранное число не делиться ни на что в диапазоне от 2 до этого числа(не включительно).
#Попробуйте оптимизировать(ускорить) процесс выяснения
#простоты числа при помощи оператора break, когда найдёте делитель. (Не обязательно)
#Переменные меняющее своё булевое состояние
#на противоположное в процессе проверки,
#как is_prime, в кругах разработчиков называются перменными-флагами(flag).
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
primes = []
not_primes = []
for i in numbers:
    if i == 1:
        continue
    is_prime = True
    for j in range(2, i):
        if i % j == 0:
            is_prime = False
            break
    if is_prime:
        primes.append(i)
    else:
        not_primes.append(i)
print(primes)
print(not_primes)